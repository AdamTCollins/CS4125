@startuml
scale 1024 width
scale 768 height
left to right direction

' Interfaces and Abstract Classes
interface Subscriber {
    +update(event: str, message: str): void
}

interface Strategy {
    +train(data): void
    +predict(data): any
    +evaluate(data): void
}

abstract class BaseModel {
    +train(data): void
    +predict(X_test): any
    +evaluate(data): void
    +data_transform(): void
}

' Concrete Implementations of Subscriber
class ConsoleLogger {
    -name: str
    +update(event: str, message: str): void
}

class MetricsCollector {
    -metrics: list
    +update(event: str, message: str): void
}

Subscriber <|-- ConsoleLogger
Subscriber <|-- MetricsCollector

' Publisher for Observer Pattern
class Publisher {
    -subscribers: dict
    +register(event: str, who: Subscriber, callback: callable=None): void
    +unregister(event: str, who: Subscriber): void
    +dispatch(event: str, message: str): void
}

Publisher --> Subscriber

' Data Class
class Data {
    -X: np.ndarray
    -df: pd.DataFrame
    +split_train_test(test_size: float=0.2, random_state: int=42): tuple
    +get_X_train(): np.ndarray
    +get_X_test(): np.ndarray
    +get_type_y_train(): np.ndarray
    +get_type_y_test(): np.ndarray
}

' Config Class
class Config {
    +TICKET_SUMMARY: str
    +INTERACTION_CONTENT: str
    +TYPE_1: str
    +TYPE_2: str
    +TYPE_3: str
    +TYPE_4: str
}

' Translator Class
class Translator {
    +translate(text: str): str
    +detect_language(text: str): str
}

' Strategy Pattern
class ModelContext {
    -_strategy: Strategy
    +set_strategy(strategy: Strategy): void
    +train(data): void
    +predict(data: pd.Series): any
    +evaluate(data): void
}

class CNNStrategy {
    +train(data): void
    +predict(data): any
    +evaluate(data): void
}

Strategy <|-- CNNStrategy
ModelContext --> Strategy

' Factory Pattern for Classifiers
class ClassifierFactory {
    +get_classifier(data: Data, df: pd.DataFrame, classifier_type: str, kwargs): Strategy
}

' Export Factory and Exporters
class ExportFactory {
    +get_exporter(format_type: str): Exporter
}

class CSVExporter {
    +export(data: dict, file_path: str): void
}

class JSONExporter {
    +export(data: dict, file_path: str): void
}

ExportFactory --> CSVExporter
ExportFactory --> JSONExporter

' ClassifierFacade
class ClassifierFacade {
    -publisher: Publisher
    -logger: ConsoleLogger
    +load_data(file_path: str): pd.DataFrame
    +preprocess_data(df: pd.DataFrame): pd.DataFrame
    +perform_modelling(data: Data, df: pd.DataFrame, model_name: str, export_path: str, export_format: str): void
    +train_and_evaluate(data: Data, df: pd.DataFrame, strategy_name: str, kwargs): void
    +export_results(data: dict, file_path: str, format_type: str): void
}

' Embedding Generator
class TfidfEmbedding {
    +get_tfidf_embd(df: pd.DataFrame, column_name="Interaction content"): np.ndarray
}

' Specific Models
class NeuralNetworkModel {
    -hidden_layer_sizes: tuple
    -activation: str
    -solver: str
    -max_iter: int
    +train(data): void
    +predict(X_test): np.ndarray
}

class RandomForestModel {
    -n_estimators: int
    +train(data): void
    +predict(X_test): np.ndarray
    +print_results(data): void
}

class SVMStrategy {
    -model_name: str
    -kernel: str = "linear"
    -C: float = 1.0
    +train(data): void
    +predict(X_test: pd.Series): np.ndarray
    +evaluate(data): void
}

class RandomForestStrategy {
    -model_name: str
    -n_estimators: int = 1000
    -mdl: RandomForestClassifier
    +train(data): void
    +predict(data): pd.Series
    +evaluate(data): void
}

class NeuralNetworkStrategy {
    -model_name: str
    -hidden_layer_sizes: tuple = (100,)
    -activation: str = "relu"
    -solver: str = "adam"
    -max_iter: int = 500
    +train(data): void
    +predict(data: pd.Series): np.ndarray
    +evaluate(data): void
}

class SVMModel {
    -kernel: str
    -C: float
    +train(data): void
    +predict(X_test): np.ndarray
    +evaluate(data): void
}

class XGBoostStrategy {
    -max_depth: int
    -learning_rate: float
    -n_estimators: int
    +train(data): void
    +predict(X_test): np.ndarray
    +evaluate(data): void
}

class KNNStrategy {
    -n_neighbors: int
    -weights: str
    +train(data): void
    +predict(X_test): np.ndarray
    +evaluate(data): void
}

BaseModel <|-- NeuralNetworkModel
BaseModel <|-- RandomForestModel
BaseModel <|-- SVMModel
Strategy <|-- XGBoostStrategy
Strategy <|-- KNNStrategy
Strategy <|-- SVMStrategy
Strategy <|-- NeuralNetworkStrategy
Strategy <|-- RandomForestStrategy

ClassifierFacade --> Publisher
ClassifierFacade --> ConsoleLogger
ClassifierFacade --> ClassifierFactory
ClassifierFacade --> ExportFactory
ClassifierFacade --> Translator
ClassifierFacade --> Data
ClassifierFacade --> TfidfEmbedding

@enduml
